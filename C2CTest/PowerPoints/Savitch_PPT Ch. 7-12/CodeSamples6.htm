<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>Java</title>
</head>

<body bgcolor="#CCFFFF">

<p align="center"><span style="font-size:12.0pt;font-family:Arial;mso-ascii-font-family:Arial;
mso-fareast-font-family:+mn-ea;mso-bidi-font-family:+mn-cs;color:black;
mso-color-index:1;mso-font-kerning:12.0pt;language:en-US;font-style:italic">JAVA:
An Introduction to Problem Solving &amp; Programming, 7</span><span style="font-size:12.0pt;font-family:Arial;mso-ascii-font-family:Arial;
mso-fareast-font-family:+mn-ea;mso-bidi-font-family:+mn-cs;color:black;
mso-color-index:1;mso-font-kerning:12.0pt;language:en-US;vertical-align:super;
mso-text-raise:30%">th</span><span style="font-size:12.0pt;font-family:Arial;
mso-ascii-font-family:Arial;mso-fareast-font-family:+mn-ea;mso-bidi-font-family:
+mn-cs;color:black;mso-color-index:1;mso-font-kerning:12.0pt;language:en-US">
Ed. By Walter Savitch</span><span style="font-size:12.0pt;font-family:
Arial;mso-ascii-font-family:Arial;mso-fareast-font-family:+mn-ea;mso-bidi-font-family:
+mn-cs;color:black;mso-color-index:1;mso-font-kerning:12.0pt;language:en-US">.<br>
ISBN <span style="color: rgb(0, 0, 0); font-family: Arial; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: -webkit-center; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(204, 255, 255); display: inline !important; float: none;">0133862119</span></span><span style="font-size:12.0pt;font-family:Arial;
mso-ascii-font-family:Arial;mso-fareast-font-family:+mn-ea;mso-bidi-font-family:
Arial;color:black;mso-color-index:1;mso-font-kerning:12.0pt;language:en-US">©
2015 Pearson Education, Inc., Upper Saddle River, NJ. All Rights Reserved</span> </p>

<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="39%">
    <tr>
      <td width="50%">
        <ul>
          <li><font face="Arial"><a href="#Listing 11.1">Listing 11.1</a></font></li>
          <li><font face="Arial"><a href="#Listing 11.2">Listing 11.2</a></font></li>
          <li><font face="Arial"><a href="#Listing 11.3">Listing 11.3</a></font></li>
          <li><font face="Arial"><a href="#Listing 11.4">Listing 11.4</a></font></li>
          <li><font face="Arial"><a href="#Listing 11.5">Listing 11.5</a></font></li>
          <li><font face="Arial"><a href="#Listing 11.6">Listing 11.6</a></font></li>
          <li><font face="Arial"><a href="#Listing 11.7">Listing 11.7</a></font></li>
          <li><font face="Arial"><a href="#Listing 11.8">Listing 11.8</a></font></li>
          <li><font face="Arial"><a href="#Listing 11.9">Listing 11.9</a><br>
            <br>
            <br>
            <br>
            </font></li>
        </ul>
      </td>
      <td width="50%">
        <ul>
          <li><font face="Arial"><a href="#Listing 12.1">Listing 12.1</a></font></li>
          <li><font face="Arial"><a href="#Listing 12.2">Listing 12.2</a></font></li>
          <li><font face="Arial"><a href="#Listing 12.3">Listing 12.3</a></font></li>
          <li><font face="Arial"><a href="#Listing 12.4">Listing 12.4</a></font></li>
          <li><font face="Arial"><a href="#Listing 12.5">Listing 12.5</a></font></li>
          <li><font face="Arial"><a href="#Listing 12.6">Listing 12.6</a></font></li>
          <li><font face="Arial"><a href="#Listing 12.7">Listing 12.7</a></font></li>
          <li><font face="Arial"><a href="#Listing 12.8">Listing 12.8</a></font></li>
          <li><font face="Arial"><a href="#Listing 12.9">Listing 12.9</a></font></li>
          <li><font face="Arial"><a href="#Listing 12.10">Listing 12.10</a></font></li>
          <li><font face="Arial"><a href="#Listing 12.11">Listing 12.11</a></font></li>
          <li><font face="Arial"><a href="#Listing 12.12">Listing 12.12</a></font></li>
          <li><font face="Arial"><a href="#Listing 12.13">Listing 12.13</a></font></li>
        </ul>
      </td>
    </tr>
  </table>
  </center>
</div>

<p align="center">&nbsp; </p>

<p align="center">&nbsp; </p>

<p align="center">&nbsp; </p>

<p align="center">&nbsp; </p>

<p align="center">&nbsp; </p>

<p align="center">&nbsp; </p>

<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 11.1">Listing
        11.1</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">
public class RecursiveCountdown
{
	public static void main(String[] args)
	{
		countDown(3);
	}

	public static void countDown(int num)
	{
		if (num <= 0)
		{
			System.out.println();
		}
		else
		{
			System.out.print(num);
			countDown(num - 1);
		}
	}
}        
        </font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>
p align="center">&nbsp; </p>



<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 11.2">Listing
        11.2</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">import java.util.Scanner;
public class RecursionDemo
{
    public static void main (String [] args)
    {
        System.out.println (&quot;Enter an integer:&quot;);
        Scanner keyboard = new Scanner (System.in);
        int number = keyboard.nextInt ();
        System.out.println (&quot;The digits in that number are:&quot;);
        displayAsWords (number);
        System.out.println ();
        System.out.println (&quot;If you add ten to that number, &quot;);
        System.out.println (&quot;the digits in the new number are:&quot;);
        number = number + 10;
        displayAsWords (number);
        System.out.println ();
    }


    /**
    Precondition: number &gt;= 0
    Displays the digits in number as words.
    */
    public static void <span style="background-color: #FFFF00">displayAsWords (int number)</span>
    {
        if (number &lt; 10)
            System.out.print (getWordFromDigit (number) + &quot; &quot;);
        else //number has two or more digits
        {
            <span style="background-color: #FFFF00">displayAsWords (number / 10);
</span>            System.out.print (getWordFromDigit (number % 10) + &quot; &quot;);
        }
    }


    // Precondition: 0 &lt;= digit &lt;= 9
    // Returns the word for the argument digit.
    private static String getWordFromDigit (int digit)
    {
        String result = null;
        switch (digit)
        {
            case 0:
                result = &quot;zero&quot;;
                break;
            case 1:
                result = &quot;one&quot;;
                break;
            case 2:
                result = &quot;two&quot;;
                break;
            case 3:
                result = &quot;three&quot;;
                break;
            case 4:
                result = &quot;four&quot;;
                break;
            case 5:
                result = &quot;five&quot;;
                break;
            case 6:
                result = &quot;six&quot;;
                break;
            case 7:
                result = &quot;seven&quot;;
                break;
            case 8:
                result = &quot;eight&quot;;
                break;
            case 9:
                result = &quot;nine&quot;;
                break;
            default:
                System.out.println (&quot;Fatal Error.&quot;);
                System.exit (0);
                break;
        }
        return result;
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 11.3">Listing
        11.3</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">import java.util.Scanner;
public class IterativeDemo
{
    public static void main (String [] args)
        &lt; The rest of main is the same as in Listing 11.1 . &gt;
        /**
        Precondition: number &gt;= 0
        Displays the digits in number as words.
        */
        public static void <span style="background-color: #FFFF00">displayAsWords (int number)</span>
    {
        int divisor = getPowerOfTen (number);
        int next = number;
        <span style="background-color: #FFFF00">while (divisor &gt;= 10)                                    </span>
        <span style="background-color: #FFFF00">{                                                        </span>
        <span style="background-color: #FFFF00">    System.out.print (getWordFromDigit (next / divisor) +</span>
        <span style="background-color: #FFFF00">            &quot; &quot;);                                        </span>
        <span style="background-color: #FFFF00">    next = next % divisor;                               </span>
        <span style="background-color: #FFFF00">    divisor = divisor / 10;                              </span>
        <span style="background-color: #FFFF00">}                                                        </span>
        System.out.print (getWordFromDigit (next / divisor) + &quot; &quot;);
    }


    // Precondition: n &gt;= 0.
    // Returns 10 raised to the power n.
    private static int getPowerOfTen (int n)
    {
        int result = 1;
        while (n &gt;= 10)
        {
            result = result * 10;
            n = n / 10;
        }
        return result;
    }


    private static String getWordFromDigit (int digit)
        // The rest of getWordFromDigit is the same as in Listing 11.1 
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 11.4">Listing
        11.4</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">import java.util.Scanner;
public class RecursionDemo2
{
    public static void main (String [] args)
    {
        System.out.println (&quot;Enter a nonnegative number:&quot;);
        Scanner keyboard = new Scanner (System.in);
        int number = keyboard.nextInt ();
        System.out.println (number + &quot; contains &quot; +
                getNumberOfZeros (number) + &quot; zeros.&quot;);
    }


    /**
    Precondition: n &gt;= 0
    Returns the number of zero digits in n.
    */
    public static int <span style="background-color: #FFFF00">getNumberOfZeros (int n)</span>
    {
        int result;
        if (n == 0)
            result = 1;
        else if (n &lt; 10)
            result = 0; //n has one digit that is not 0
        else if (n % 10 == 0)
            result = <span style="background-color: #FFFF00">getNumberOfZeros (n / 10) + 1;</span>
        else //n % 10 != 0
            result = <span style="background-color: #FFFF00">getNumberOfZeros (n / 10);</span>
        return result;
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 11.5">Listing
        11.5</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">import java.util.Scanner;
public class CountDown
{
    private int count;
    public static void main (String [] args)
    {
        CountDown countDowner = new CountDown ();
        countDowner.getCount ();
        countDowner.showCountDown ();
    }


    public void <span style="background-color: #FFFF00">getCount ()</span>
    {
        System.out.println (&quot;Enter a positive integer:&quot;);
        Scanner keyboard = new Scanner (System.in);
        count = keyboard.nextInt ();
        if (count &lt;= 0)
        {
            System.out.println (&quot;Input must be positive.&quot;);
            System.out.println (&quot;Try again.&quot;);
            <span style="background-color: #FFFF00">getCount (); //start over</span>
        }
    }


    public void showCountDown ()
    {
        System.out.println (&quot;Counting down:&quot;);
        for (int left = count ; left &gt;= 0 ; left--)
            System.out.print (left + &quot;, &quot;);
        System.out.println (&quot;Blast Off!&quot;);
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 11.6">Listing
        11.6</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">/**
Class for searching an already sorted array of integers.
*/
public class ArraySearcher
{
    private int [] a;
    /**
    Precondition: theArray is full and is sorted
    from lowest to highest.
    */
    public ArraySearcher (int [] theArray)
    {
        a = theArray; //a is now another name for theArray.
    }


    /**
    If target is in the array, returns the index of an occurrence
    of target. Returns -1 if target is not in the array.
    */
    public int find (int target)
    {
        return binarySearch (target, 0, a.length - 1);
    }


    //Uses binary search to search for target in a[first] through
    //a[last] inclusive. Returns the index of target if target
    //is found. Returns -1 if target is not found.
    private int binarySearch (int target, int first, int last)
    {
        int result;
        if (first &gt; last)
            result = -1;
        else
        {
            <span style="background-color: #FFFF00">int mid = (first + last) / 2;                      </span>
            <span style="background-color: #FFFF00">if (target == a [mid])                             </span>
            <span style="background-color: #FFFF00">    result = mid;                                  </span>
            <span style="background-color: #FFFF00">else if (target &lt; a [mid])                         </span>
            <span style="background-color: #FFFF00">    result = binarySearch (target, first, mid - 1);</span>
            <span style="background-color: #FFFF00">else //(target &gt; a[mid])                           </span>
            <span style="background-color: #FFFF00">    result = binarySearch (target, mid + 1, last); </span>
        }
        return result;
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 11.7">Listing
        11.7</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">import java.util.Scanner;
public class ArraySearcherDemo
{
    public static void main (String [] args)
    {
        int [] anArray = new int [10];
        Scanner keyboard = new Scanner (System.in);
        System.out.println (&quot;Enter 10 integers in increasing order,&quot;);
        System.out.println (&quot;one per line.&quot;);
        for (int i = 0 ; i &lt; 10 ; i++)
            anArray [i] = keyboard.nextInt ();
        System.out.println ();
        for (int i = 0 ; i &lt; 10 ; i++)
            System.out.print (&quot;a[&quot; + i + &quot;]=&quot; + anArray [i] + &quot; &quot;);
        System.out.println ();
        System.out.println ();
        <span style="background-color: #FFFF00">ArraySearcher finder = new ArraySearcher (anArray);</span>
        String ans;
        do
        {
            System.out.println (&quot;Enter a value to search for:&quot;);
            int target = keyboard.nextInt ();
            <span style="background-color: #FFFF00">int result = finder.find (target);</span>
            if (result &lt; 0)
                System.out.println (target +
                        &quot; is not in the array.&quot;);
            else
                System.out.println (target + &quot; is at index &quot; +
                        result);
            System.out.println (&quot;Again?&quot;);
            ans = keyboard.next ();
        }
        while (ans.equalsIgnoreCase (&quot;yes&quot;));
        System.out.println (
                &quot;May you find what you're searching for.&quot;);
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 11.8">Listing
        11.8</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">/**
Class for sorting an array of integers from smallest to largest
using the merge sort algorithm.
*/
public class MergeSort
{
    /**
    Precondition: Every indexed variable of the array a has a value.
    Postcondition: a[0] &lt;= a[1] &lt;= ... &lt;= a[a.length - 1].
    */
    public static void <span style="background-color: #FFFF00">sort (int [] a)</span>
    {
        if (a.length &gt;= 2)
        {
            int halfLength = a.length / 2;
            int [] firstHalf = new int [halfLength];
            int [] lastHalf = new int [a.length - halfLength];
            <span style="background-color: #FFFF00">divide (a, firstHalf, lastHalf);</span>
            <span style="background-color: #FFFF00">sort (firstHalf);               </span>
            <span style="background-color: #FFFF00">sort (lastHalf);                </span>
            <span style="background-color: #FFFF00">merge (a, firstHalf, lastHalf); </span>
        }
        //else do nothing. a.length == 1, so a is sorted.
    }


    //Precondition: a.length = firstHalf.length + lastHalf.length.
    //Postcondition: All the elements of a are divided
    //between the arrays firstHalf and lastHalf.
    private static void divide (int [] a, int [] firstHalf,
            int [] lastHalf)
    {
        for (int i = 0 ; i &lt; firstHalf.length ; i++)
            firstHalf [i] = a [i];
        for (int i = 0 ; i &lt; lastHalf.length ; i++)
            lastHalf [i] = a [firstHalf.length + i];
    }


    //Precondition: Arrays firstHalf and lastHalf are sorted from
    //smallest to largest; a.length = firstHalf.length +
    //lastHalf.length.
    //Postcondition: Array a contains all the values from firstHalf
    //and lastHalf and is sorted from smallest to largest.
    private static void merge (int [] a, int [] firstHalf,
            int [] lastHalf)
    {
        int firstHalfIndex = 0, lastHalfIndex = 0, aIndex = 0;
        while ((firstHalfIndex &lt; firstHalf.length) &amp;&amp;
                (lastHalfIndex &lt; lastHalf.length))
        {
            <span style="background-color: #FFFF00">if (firstHalf [firstHalfIndex] &lt; lastHalf [lastHalfIndex])</span>
            <span style="background-color: #FFFF00">{                                                         </span>
            <span style="background-color: #FFFF00">    a [aIndex] = firstHalf [firstHalfIndex];              </span>
            <span style="background-color: #FFFF00">    firstHalfIndex++;                                     </span>
            <span style="background-color: #FFFF00">}                                                         </span>
            <span style="background-color: #FFFF00">else                                                      </span>
            <span style="background-color: #FFFF00">{                                                         </span>
            <span style="background-color: #FFFF00">    a [aIndex] = lastHalf [lastHalfIndex];                </span>
            <span style="background-color: #FFFF00">    lastHalfIndex++;                                      </span>
            <span style="background-color: #FFFF00">}                                                         </span>
            <span style="background-color: #FFFF00">aIndex++;                                                 </span>
        }
        //At least one of firstHalf and lastHalf has been
        //completely copied to a.
        //Copy rest of firstHalf, if any.
        while (firstHalfIndex &lt; firstHalf.length)
        {
            a [aIndex] = firstHalf [firstHalfIndex];
            aIndex++;
            firstHalfIndex++;
        }
        //Copy rest of lastHalf, if any.
        while (lastHalfIndex &lt; lastHalf.length)
        {
            a [aIndex] = lastHalf [lastHalfIndex];
            aIndex++;
            lastHalfIndex++;
        }
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 11.9">Listing 11.9</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">public class MergeSortDemo
{
    public static void main (String [] args)
    {
        int [] anArray = {7, 5, 11, 2, 16, 4, 18, 14, 12, 30};
        System.out.println (&quot;Array values before sorting:&quot;);
        for (int i = 0 ; i &lt; anArray.length ; i++)
            System.out.print (anArray [i] + &quot; &quot;);
        System.out.println ();
        <span style="background-color: #FFFF00">MergeSort.sort (anArray);</span>
        System.out.println (&quot;Array values after sorting:&quot;);
        for (int i = 0 ; i &lt; anArray.length ; i++)
            System.out.print (anArray [i] + &quot; &quot;);
        System.out.println ();
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 12.1">Listing
        12.1</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">import java.util.ArrayList;
import java.util.Scanner;
public class ArrayListDemo
{
    public static void main (String [] args)
    {
        <span style="background-color: #FFFF00">ArrayList&lt;String&gt; toDoList = new ArrayList&lt;String&gt;();</span>
        System.out.println (
                &quot;Enter items for the list, when prompted.&quot;);
        boolean done = false;
        Scanner keyboard = new Scanner (System.in);
        while (!done)
        {
            System.out.println (&quot;Type an entry:&quot;);
            String entry = keyboard.nextLine ();
            toDoList.add (entry);
            System.out.print (&quot;More items for the list? &quot;);
            String ans = keyboard.nextLine ();
            if (!ans.equalsIgnoreCase (&quot;yes&quot;))
                done = true;
        }
        System.out.println (&quot;The list contains:&quot;);
        int listSize = toDoList.size ();
        for (int position = 0 ; position &lt; listSize ; position++)
            System.out.println (toDoList.get (position));
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>




<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 12.2">Listing
        12.2</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">    
import java.util.HashSet;

public class HashSetDemo
{
	public static void main(String[] args)
	{
		HashSet&lt;Integer&gt; intSet = new HashSet&lt;Integer&gt;();

		intSet.add(2);
		intSet.add(7);
		intSet.add(7);	// Ignored since 7 is already in the set
		intSet.add(3);
		printSet(intSet);

		intSet.remove(3);
		printSet(intSet);

		System.out.println("Set contains 2: " +
			intSet.contains(2));
		System.out.println("Set contains 3: " +
			intSet.contains(3));
	}

	public static void printSet(HashSet&lt;Integer&gt; intSet)
	{
		System.out.println("The set contains:");
		for (Object obj : intSet.toArray())
		{
			Integer num = (Integer) obj;
			System.out.println(num.intValue());
		}
	}
}     
        </font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 12.3">Listing
        12.3</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">    
import java.util.HashMap;

public class HashMapDemo
{
	public static void main(String[] args)
	{
		HashMap&lt;String, Integer&gt; mountains = new HashMap&lt;String, Integer&gt;();
		mountains.put("Everest",29029);
		mountains.put("K2",28251);
		mountains.put("Kangchenjunga",28169);
		mountains.put("Denali",20335);
		printMap(mountains);

		System.out.println("Denali in the map: " +
			mountains.containsKey("Denali"));
		System.out.println();

		System.out.println("Changing height of Denali.");
		mountains.put("Denali", 20320); // Overwrites old value for Denali
		printMap(mountains);

		System.out.println("Removing Kangchenjunga.");
		mountains.remove("Kangchenjunga");
		printMap(mountains);

	}

	public static void printMap(HashMap&lt;String, Integer&gt; map)
	{
		System.out.println("Map contains:");
		for (String keyMountainName : map.keySet())
		{
			Integer height = map.get(keyMountainName);
			System.out.println(keyMountainName +
                     " --> " + height.intValue() + " feet.");
		}
		System.out.println();
	}
}        
        </font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 12.4">Listing
        12.4</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">public class ListNode
{
    private String data;
    private <span style="background-color: #FFFF00">ListNode</span> link;

    public ListNode ()
    {
        link = null;
        data = null;
    }

    public ListNode (String newData, ListNode linkValue)
    {
        data = newData;
        link = linkValue;
    }

    public void setData (String newData)
    {
        data = newData;
    }

    public String getData ()
    {
        return data;
    }

    public void setLink (ListNode newLink)
    {
        link = newLink;
    }

    public ListNode getLink ()
    {
        return link;
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 12.5">Listing
        12.5</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">public class StringLinkedList
{
    private ListNode head;
    public StringLinkedList ()
    {
        head = null;
    }


    /**
    Displays the data on the list.
    */
    public void showList ()
    {
        <span style="background-color: #FFFF00">ListNode position = head;                    </span>
        <span style="background-color: #FFFF00">while (position != null)                     </span>
        <span style="background-color: #FFFF00">{                                            </span>
        <span style="background-color: #FFFF00">    System.out.println (position.getData ());</span>
        <span style="background-color: #FFFF00">    position = position.getLink ();          </span>
        <span style="background-color: #FFFF00">}                                            </span>
    }


    /**
    Returns the number of nodes on the list.
    */
    public int length ()
    {
        int count = 0;
        ListNode position = head;
        while (position != null)
        {
            count++;
            position = position.getLink ();
        }
        return count;
    }

    /**
    Adds a node containing the data addData at the
    start of the list.
    */
    public void addANodeToStart (String addData)
    {
        head = new ListNode (addData, head);
    }


    /**
    Deletes the first node on the list.
    */
    public void deleteHeadNode ()
    {
        if (head != null)
            head = head.getLink ();
        else
        {
            System.out.println (&quot;Deleting from an empty list.&quot;);
            System.exit (0);
        }
    }


    /**
    Sees whether target is on the list.
    */
    public boolean onList (String target)
    {
        return find (target) != null;
    }


    // Returns a reference to the first node containing the
    // target data. If target is not on the list, returns null.
    private ListNode find (String target)
    {
        boolean found = false;
        ListNode position = head;
        while ((position != null) &amp;&amp; !found)
        {
            <span style="background-color: #FFFF00">String dataAtPosition = position.getData ();</span>
            <span style="background-color: #FFFF00">if (dataAtPosition.equals (target))         </span>
            <span style="background-color: #FFFF00">    found = true;                           </span>
            <span style="background-color: #FFFF00">else                                        </span>
            <span style="background-color: #FFFF00">    position = position.getLink ();         </span>
        }
        return position;
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 12.6">Listing
        12.6</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">public class StringLinkedListDemo
{
    public static void main (String [] args)
    {
        StringLinkedList list = new StringLinkedList ();
        <span style="background-color: #FFFF00">list.addANodeToStart (&quot;One&quot;);  </span>
        <span style="background-color: #FFFF00">list.addANodeToStart (&quot;Two&quot;);  </span>
        <span style="background-color: #FFFF00">list.addANodeToStart (&quot;Three&quot;);</span>
        System.out.println (&quot;List has &quot; + list.length () +
                &quot; entries.&quot;);
        <span style="background-color: #FFFF00">list.showList ();</span>
        if (list.onList (&quot;Three&quot;))
            System.out.println (&quot;Three is on list.&quot;);
        else
            System.out.println (&quot;Three is NOT on list.&quot;);
        <span style="background-color: #FFFF00">list.deleteHeadNode ();</span>
        if (list.onList (&quot;Three&quot;))
            System.out.println (&quot;Three is on list.&quot;);
        else
            System.out.println (&quot;Three is NOT on list.&quot;);
        <span style="background-color: #FFFF00">list.deleteHeadNode ();</span>
        <span style="background-color: #FFFF00">list.deleteHeadNode ();</span>
        System.out.println (&quot;Start of list:&quot;);
        <span style="background-color: #FFFF00">list.showList ();</span>
        System.out.println (&quot;End of list.&quot;);
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 12.7">Listing
        12.7</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">public class StringLinkedListSelfContained
{
    private ListNode head;
    public StringLinkedListSelfContained ()
    {
        head = null;
    }


    /**
    Displays the data on the list.
    */
    public void showList ()
    {
        ListNode position = head;
        while (position != null)
        {
            System.out.println (<span style="background-color: #FFFF00">position.data</span>);
            position = <span style="background-color: #FFFF00">position.link</span>;
        }
    }


    /**
    Returns the number of nodes on the list.
    */
    public int length ()
    {
        int count = 0;
        ListNode position = head;
        while (position != null)
        {
            count++;
            position = position.link;
        }
        return count;
    }


    /**
    Adds a node containing the data addData at the
    start of the list.
    */
    public void addANodeToStart (String addData)
    {
        head = new ListNode (addData, head);
    }


    /**
    Deletes the first node on the list.
    */
    public void deleteHeadNode ()
    {
        if (head != null)
            head = head.link;
        else
        {
            System.out.println (&quot;Deleting from an empty list.&quot;);
            System.exit (0);
        }
    }


    /**
    Sees whether target is on the list.
    */
    public boolean onList (String target)
    {
        return find (target) != null;
    }


    // Returns a reference to the first node containing the
    // target data. If target is not on the list, returns null.
    private ListNode find (String target)
    {
        boolean found = false;
        ListNode position = head;
        while ((position != null) &amp;&amp; !found)
        {
            String dataAtPosition = position.data;
            if (dataAtPosition.equals (target))
                found = true;
            else
                position = position.link;
        }
        return position;
    }


    <span style="background-color: #FFFF00">private class ListNode                                  </span>
    <span style="background-color: #FFFF00">{                                                       </span>
    <span style="background-color: #FFFF00">    private String data;                                </span>
    <span style="background-color: #FFFF00">    private ListNode link;                              </span>
    <span style="background-color: #FFFF00">    public ListNode ()                                  </span>
    <span style="background-color: #FFFF00">    {                                                   </span>
    <span style="background-color: #FFFF00">        link = null;                                    </span>
    <span style="background-color: #FFFF00">        data = null;                                    </span>
    <span style="background-color: #FFFF00">    }                                                   </span>
    <span style="background-color: #FFFF00">    public ListNode (String newData, ListNode linkValue)</span>
    <span style="background-color: #FFFF00">    {                                                   </span>
    <span style="background-color: #FFFF00">        data = newData;                                 </span>
    <span style="background-color: #FFFF00">        link = linkValue;                               </span>
    <span style="background-color: #FFFF00">    }                                                   </span>
    <span style="background-color: #FFFF00">}                                                       </span>
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 12.8">Listing
        12.8</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">/**
Returns an array of the elements on the list.
*/
public String [] toArray ()
{
    String [] anArray = new String [length ()];
    ListNode position = head;
    int i = 0;
    while (position != null)
    {
        anArray [i] = position.data;
        i++;
        position = position.link;
    }

    return anArray;
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 12.9">Listing
        12.9</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">/**
Linked list with an iterator. One node is the &quot;current node.&quot;
Initially, the current node is the first node. It can be changed
to the next node until the iteration has moved beyond the end
of the list.
*/
public class StringLinkedListWithIterator
{
    private ListNode head;
    private <span style="background-color: #FFFF00">ListNode current; </span>
    private <span style="background-color: #FFFF00">ListNode previous;</span>
    public StringLinkedListWithIterator ()
    {
        head = null;
        <span style="background-color: #FFFF00">current = null; </span>
        <span style="background-color: #FFFF00">previous = null;</span>
    }


    public void addANodeToStart (String addData)
    {
        head = new ListNode (addData, head);
        <span style="background-color: #FFFF00">if ((current == head.link) &amp;&amp; (current != null))</span>
        <span style="background-color: #FFFF00">    //if current is at old start node           </span>
        <span style="background-color: #FFFF00">    previous = head;                            </span>
    }


    /**
    Sets iterator to beginning of list.
    */
    public void resetIteration ()
    {
        <span style="background-color: #FFFF00">current = head; </span>
        <span style="background-color: #FFFF00">previous = null;</span>
    }


    /**
    Returns true if iteration is not finished.
    */
    public boolean <span style="background-color: #FFFF00">moreToIterate ()</span>
    {
        return <span style="background-color: #FFFF00">current != null;</span>
    }<span style="background-color: #FFFF00">
</span>

    /**
    Advances iterator to next node.
    */
    public void <span style="background-color: #FFFF00">goToNext ()</span>
    {
        if (current != null)
        {
            <span style="background-color: #FFFF00">previous = current;    </span>
            <span style="background-color: #FFFF00">current = current.link;</span>
        }
        else if (head != null)
        {
            System.out.println (
                    &quot;Iterated too many times or uninitialized iteration.&quot;);
            System.exit (0);
        }
        else
        {
            System.out.println (&quot;Iterating with an empty list.&quot;);
            System.exit (0);
        }<span style="background-color: #FFFF00">
</span>    }


    /**
    Returns the data at the current node.
    */
    public String getDataAtCurrent ()
    {
        String result = null;
        if (current != null)
            result = current.data;
        else
        {
            System.out.println (
                    &quot;Getting data when current is not at any node.&quot;);
            System.exit (0);
        }
        return result;
    }


    /**
    Replaces the data at the current node.
    */
    public void setDataAtCurrent (String newData)
    {
        if (current != null)
        {
            current.data = newData;
        }
        else
        {
            System.out.println (
                    &quot;Setting data when current is not at any node.&quot;);
            System.exit (0);
        }
    }


    /**
    Inserts a new node containing newData after the current node.
    The current node is the same after invocation as it is before.
    Precondition: List is not empty; current node is not
    beyond the entire list.
    */
    public void <span style="background-color: #FFFF00">insertNodeAfterCurrent (String newData)</span>
    {
        ListNode newNode = new ListNode ();
        newNode.data = newData;
        if (current != null)
        {
            <span style="background-color: #FFFF00">newNode.link = current.link;</span>
            <span style="background-color: #FFFF00">current.link = newNode;     
</span>        }
        else if (head != null)
        {
            System.out.println (
                    &quot;Inserting when iterator is past all &quot; +
                    &quot;nodes or is not initialized.&quot;);
            System.exit (0);
        }
        else
        {
            System.out.println (
                    &quot;Using insertNodeAfterCurrent with empty list.&quot;);
            System.exit (0);
        }
    }

<span style="background-color: #FFFF00">
</span>    /**
    Deletes the current node. After the invocation,
    the current node is either the node after the
    deleted node or null if there is no next node.
    */
    public void <span style="background-color: #FFFF00">deleteCurrentNode ()</span>
    {
        if ((current != null) &amp;&amp; (previous != null))
        {
            <span style="background-color: #FFFF00">previous.link = current.link;</span>
            <span style="background-color: #FFFF00">current = current.link;      </span>
        }
        else if ((current != null) &amp;&amp; (previous == null))
        { //At head node
            head = current.link;
            current = head;
        }
        else //current == null
        {
            System.out.println (
                    &quot;Deleting with uninitialized current or an empty list.&quot;);
            System.exit (0);
        }
    }

    //  The methods length, onList, find, and showList, as well as the private inner class
    //  ListNode are the same as in <a href="#Listing 12.7">Listing 12.7.</a>
    //  The method toArray is the same as in <a href="#Listing 12.8">Listing 12.8</a>.
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 12.10">Listing
        12.10</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">public class LinkedListException extends Exception
{
    public LinkedListException ()
    {
        super (&quot;Linked List Exception&quot;);
    }


    public LinkedListException (String message)
    {
        super (message);
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 12.11">Listing
        12.11</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4"><span style="background-color: #FFFF00">public class Sample&lt;T&gt;</span>
{
    private <span style="background-color: #FFFF00">T</span> data;
    public void setData (<span style="background-color: #FFFF00">T</span> newValue)
    {
        data = newValue;
    }


    public <span style="background-color: #FFFF00">T</span> getData ()
    {
        return data;
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 12.12">Listing
        12.12</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">import java.util.ArrayList;
public class LinkedList <span style="background-color: #FFFF00">&lt;E&gt;</span>
{
    private ListNode head;
    public LinkedList ()
    {
        head = null;
    }

    //The methods showList, length, and deleteHeadNode are the same
    //as in Listing 12.5 
    
        public void addANodeToStart (<span style="background-color: #FFFF00">E</span> addData)
    {
        head = new ListNode (addData, head);
    }


    public boolean onList (<span style="background-color: #FFFF00">E</span> target)
    {
        return find (target) != null;
    }


    private ListNode find (<span style="background-color: #FFFF00">E</span> target)
    {
        boolean found = false;
        ListNode position = head;
        while ((position != null) &amp;&amp; !found)
        {
            E dataAtPosition = position.data;
            if (dataAtPosition.equals (target))
                found = true;
            else
                position = position.link;
        }
        return position;
    }


    public ArrayList&lt;<span style="background-color: #FFFF00">E</span>&gt; toArrayList ()
    {
        ArrayList&lt;<span style="background-color: #FFFF00">E</span>&gt; list = new ArrayList&lt;<span style="background-color: #FFFF00">E</span>&gt; (length ());
        ListNode position = head;
        while (position != null)
        {
            list.add (position.data);
            position = position.link;
        }
        return list;
    }


    private class ListNode
    {
        private <span style="background-color: #FFFF00">E</span> data;
        private ListNode link;
        public ListNode ()
        {
            link = null;
            data = null;
        }
        public ListNode (<span style="background-color: #FFFF00">E</span> newData, ListNode linkValue)
        {
            data = newData;
            link = linkValue;
        }
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 12.13">Listing
        12.13</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">import java.util.ArrayList;
public class LinkedListDemo
{
    public static void main (String [] args)
    {
        <span style="background-color: #FFFF00">LinkedList&lt;String&gt; stringList = new LinkedList&lt;String&gt;</span>();
        stringList.addANodeToStart (&quot;Hello&quot;);
        stringList.addANodeToStart (&quot;Good-bye&quot;);
        stringList.showList ();
        <span style="background-color: #FFFF00">LinkedList&lt;Integer&gt; numberList =</span>
            <span style="background-color: #FFFF00">new LinkedList&lt;Integer&gt;();</span>
        for (int i = 0 ; i &lt; 10 ; i++)
            numberList.addANodeToStart (i);
        numberList.deleteHeadNode ();
        ArrayList &lt; Integer &gt; list = numberList.toArrayList ();
        int listSize = list.size ();
        for (int position = 0 ; position &lt; listSize ; position++)
            System.out.print (list.get (position) + &quot; &quot;);
        System.out.println ();
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>

</body>

</html>
